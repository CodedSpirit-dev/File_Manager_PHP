import{a}from"./app-Dich8IgY.js";a.defaults.withCredentials=!0;const s="/filemanager",p=async e=>{try{return(await a.get(`${s}/files`,{params:{path:e}})).data}catch(o){throw console.error("Error al obtener archivos:",o),o}},i=async(e,o,r=!1)=>{try{const t=new FormData;return t.append("file",e),t.append("path",o),t.append("overwrite",r?"1":"0"),(await a.post(`${s}/files/upload`,t,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(t){throw console.error("Error al subir archivo:",t),t}},d=async(e,o,r=!1)=>{try{const t=new FormData;return Array.from(e).forEach(c=>{t.append("files[]",c,c.webkitRelativePath)}),t.append("path",o),t.append("overwrite",r?"1":"0"),(await a.post(`${s}/folders/upload-directory`,t,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(t){throw console.error("Error al subir carpeta:",t),t}},h=async(e,o)=>{try{return(await a.post(`${s}/files/delete`,{filename:e,path:o})).data}catch(r){throw console.error("Error al eliminar archivo:",r),r}},w=async(e,o)=>{try{return(await a.post(`${s}/folders/delete`,{folder_name:e,path:o})).data}catch(r){throw console.error("Error al eliminar carpeta:",r),r}},y=async(e,o)=>{try{return(await a.post(`${s}/folders/create`,{folder_name:e,path:o})).data}catch(r){throw console.error("Error al crear carpeta:",r),r}},m=async e=>{try{return(await a.post(`${s}/rename`,e,{headers:{"Content-Type":"application/json"}})).data}catch(o){throw console.error("Error al renombrar elemento:",o),o}},u=async(e,o,r,t=!1)=>{try{return(await a.post(`${s}/items/copy`,{items:e,source_path:o,target_path:r,overwrite:!!t})).data}catch(n){throw console.error("Error al copiar elementos:",n),n}},f=async(e,o,r,t=!1)=>{try{return(await a.post(`${s}/items/move`,{items:e,source_path:o,target_path:r,overwrite:!!t})).data}catch(n){throw console.error("Error al mover elementos:",n),n}},b=async(e,o)=>{try{return(await a.get(`${s}/files/view`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al ver archivo:",r),r}},v=async(e,o)=>{try{return(await a.get(`${s}/public-file-url`,{params:{filename:e,path:o}})).data}catch(r){throw console.error("Error al obtener URL pública del archivo:",r),r}},E=async(e,o)=>{try{return(await a.get(`${s}/public-file`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al obtener archivo público:",r),r}},g=async(e,o)=>{try{return(await a.get(`${s}/folders/download`,{params:{folder_name:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al descargar carpeta:",r),r}},F=async(e,o)=>{try{return(await a.get(`${s}/files/download`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al descargar archivo:",r),r}},$=async()=>{try{return(await a.get(`${s}/files-tree`)).data}catch(e){throw console.error("Error al obtener el árbol de archivos:",e),e}};export{u as copyItems,y as createFolder,h as deleteFile,w as deleteFolder,F as downloadFile,g as downloadFolder,p as getFiles,$ as getFilesTree,E as getPublicFile,v as getPublicFileUrl,f as moveItems,m as renameItem,d as uploadDirectory,i as uploadFile,b as viewFile};
