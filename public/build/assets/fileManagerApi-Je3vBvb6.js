import{a}from"./app-5APUolP4.js";a.defaults.withCredentials=!0;const t="/filemanager",l=async e=>{try{return(await a.get(`${t}/files`,{params:{path:e}})).data}catch(o){throw console.error("Error al obtener archivos:",o),o}},p=async(e,o)=>{try{const r=new FormData;return r.append("file",e),r.append("path",o),(await a.post(`${t}/files/upload`,r,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(r){throw console.error("Error al subir archivo:",r),r}},i=async(e,o)=>{try{const r=new FormData;return Array.from(e).forEach(n=>{r.append("files[]",n,n.webkitRelativePath)}),r.append("path",o),(await a.post(`${t}/folders/upload-directory`,r,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(r){throw console.error("Error al subir carpeta:",r),r}},d=async(e,o)=>{try{return(await a.delete(`${t}/files/delete`,{data:{filename:e,path:o}})).data}catch(r){throw console.error("Error al eliminar archivo:",r),r}},h=async(e,o)=>{try{return(await a.delete(`${t}/folders/delete`,{data:{folder_name:e,path:o}})).data}catch(r){throw console.error("Error al eliminar carpeta:",r),r}},y=async(e,o)=>{try{return(await a.post(`${t}/folders/create`,{folder_name:e,path:o})).data}catch(r){throw console.error("Error al crear carpeta:",r),r}},w=async e=>{try{return(await a.post(`${t}/rename`,e,{headers:{"Content-Type":"application/json"}})).data}catch(o){throw console.error("Error al renombrar elemento:",o),o}},u=async(e,o,r)=>{try{return(await a.post(`${t}/files/copy-file`,{filename:e,source_path:o,target_path:r})).data}catch(s){throw console.error("Error al copiar archivo:",s),s}},f=async(e,o,r)=>{try{return(await a.post(`${t}/files/copy-files`,{filenames:e,source_path:o,target_path:r})).data}catch(s){throw console.error("Error al copiar archivos:",s),s}},m=async(e,o,r)=>{try{return(await a.post(`${t}/files/move-file`,{filename:e,source_path:o,target_path:r})).data}catch(s){throw console.error("Error al mover archivo:",s),s}},b=async(e,o)=>{try{return(await a.get(`${t}/files/view`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al ver archivo:",r),r}},E=async(e,o)=>{try{return(await a.get(`${t}/public-file-url`,{params:{filename:e,path:o}})).data}catch(r){throw console.error("Error al obtener URL pública del archivo:",r),r}},v=async(e,o)=>{try{return(await a.get(`${t}/public-file`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al obtener archivo público:",r),r}},F=async(e,o)=>{try{return(await a.get(`${t}/folders/download`,{params:{folder_name:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al descargar carpeta:",r),r}},g=async(e,o)=>{try{return(await a.get(`${t}/files/download`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al descargar archivo:",r),r}},$=async()=>{try{return(await a.get(`${t}/files-tree`)).data}catch(e){throw console.error("Error al obtener el árbol de archivos:",e),e}};export{u as copyFile,f as copyFiles,y as createFolder,d as deleteFile,h as deleteFolder,g as downloadFile,F as downloadFolder,l as getFiles,$ as getFilesTree,v as getPublicFile,E as getPublicFileUrl,m as moveFile,w as renameItem,i as uploadDirectory,p as uploadFile,b as viewFile};
