import{a as t}from"./app-CNqh7FaR.js";t.defaults.withCredentials=!0;const a="/filemanager",l=async e=>{try{return(await t.get(`${a}/files`,{params:{path:e}})).data}catch(o){throw console.error("Error al obtener archivos:",o),o}},p=async(e,o,r=!1)=>{try{const s=new FormData;return s.append("file",e),s.append("path",o),s.append("overwrite",r?"1":"0"),(await t.post(`${a}/files/upload`,s,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(s){throw console.error("Error al subir archivo:",s),s}},i=async(e,o)=>{try{const r=new FormData;return Array.from(e).forEach(n=>{r.append("files[]",n,n.webkitRelativePath)}),r.append("path",o),(await t.post(`${a}/folders/upload-directory`,r,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(r){throw console.error("Error al subir carpeta:",r),r}},d=async(e,o)=>{try{return(await t.post(`${a}/files/delete`,{filename:e,path:o})).data}catch(r){throw console.error("Error al eliminar archivo:",r),r}},h=async(e,o)=>{try{return(await t.post(`${a}/folders/delete`,{folder_name:e,path:o})).data}catch(r){throw console.error("Error al eliminar carpeta:",r),r}},w=async(e,o)=>{try{return(await t.post(`${a}/folders/create`,{folder_name:e,path:o})).data}catch(r){throw console.error("Error al crear carpeta:",r),r}},y=async e=>{try{return(await t.post(`${a}/rename`,e,{headers:{"Content-Type":"application/json"}})).data}catch(o){throw console.error("Error al renombrar elemento:",o),o}},m=async(e,o,r,s=!1)=>{try{return(await t.post(`${a}/items/copy`,{items:e,source_path:o,target_path:r,overwrite:!!s})).data}catch(n){throw console.error("Error al copiar elementos:",n),n}},u=async(e,o,r,s=!1)=>{try{return(await t.post(`${a}/items/move`,{items:e,source_path:o,target_path:r,overwrite:!!s})).data}catch(n){throw console.error("Error al mover elementos:",n),n}},f=async(e,o)=>{try{return(await t.get(`${a}/files/view`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al ver archivo:",r),r}},b=async(e,o)=>{try{return(await t.get(`${a}/public-file-url`,{params:{filename:e,path:o}})).data}catch(r){throw console.error("Error al obtener URL pública del archivo:",r),r}},E=async(e,o)=>{try{return(await t.get(`${a}/public-file`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al obtener archivo público:",r),r}},v=async(e,o)=>{try{return(await t.get(`${a}/folders/download`,{params:{folder_name:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al descargar carpeta:",r),r}},g=async(e,o)=>{try{return(await t.get(`${a}/files/download`,{params:{filename:e,path:o},responseType:"blob"})).data}catch(r){throw console.error("Error al descargar archivo:",r),r}},F=async()=>{try{return(await t.get(`${a}/files-tree`)).data}catch(e){throw console.error("Error al obtener el árbol de archivos:",e),e}};export{m as copyItems,w as createFolder,d as deleteFile,h as deleteFolder,g as downloadFile,v as downloadFolder,l as getFiles,F as getFilesTree,E as getPublicFile,b as getPublicFileUrl,u as moveItems,y as renameItem,i as uploadDirectory,p as uploadFile,f as viewFile};
